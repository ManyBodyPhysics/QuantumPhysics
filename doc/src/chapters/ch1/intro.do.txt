=======Why a text on the nuclear many-body problem ======= 


Nuclear physics has recently experienced several discoveries and
technological advances that address the fundamental questions of the
field.  Many of these advances have been made possible by significant
investments in frontier research facilities worldwide over the last
two decades. Some of these discoveries are the detection of perhaps
the most exotic state of matter, the quark-gluon plasma, which is
believed to have existed in the very first moments of the Universe
(refs).  Recent experiments have validated the standard solar model
and established that neutrinos have mass (refs). High-precision
measurements of the quark structure of the nucleon are challenging
existing theoretical understanding.  Nuclear physicists have started
to explore a completely unknown landscape of nuclei with extreme
proton to neutron ratios using radioactive and short-lived ions,
including rare and very neutron-rich isotopes.  These experiments push
us towards the extremes of nuclear stability.  Moreover, these rare
nuclei lie at the heart of nucleosynthesis processes in the universe
and are therefore an important component in the puzzle of matter
generation in the universe.

A firm experimental and theoretical understanding of nuclear stability
in terms of the basic constituents is a huge intellectual endavour.
Experiments indicate that developing a comprehensive description of
all nuclei and their reactions requires theoretical and experimental
investigations of rare isotopes with unusual neutron-to-proton ratios
that are very different from their stable counterparts.  These rare
nuclei are difficult to produce and study experimentally since they
can have extremely short lifetimes. Theoretical approaches to these
nuclei involve solving the nuclear quantum many-body problem.

It is within this framework the present texts finds its rationale.  We
want to give you the tools to tackle the nuclear many-body problem,
starting from a Hamiltonian which describes the interaction among the
relevant baryons and mesons, with protons and neutrons (nucleons) as
the leading dramatis personae.  The nuclear many-body problem spans
nuclei from A=2 (the deuteron) to the superheavy region, and different
theoretical techniques are pursued in different regions of the chart
of nuclei.  For many interacting nucleons, Schr\"odinger's equation is
an integro-differential equation whose complexity increases
exponentially with increasing numbers of nucleons and states that the
system can access.  Unfortunately, there are only almost no problems
which can be solved on a closed form, and virtually exact numerical
solutions are presently available only for systems with up to three or
four nucleons via the Faddeev~cite{Faddeev} and
Faddeev-Yakubowski~cite{FY} methods (refs here), respectively. For
problems involving more nucleons, one needs reliable numerical
many-body methods. Such methods should allow for controlled
approximations and provide a computational scheme which accounts for
successive many-body corrections in a systematic way.

This books deals with several of these many-body methods, with an
emphasis on the development of stable algorithms and codes for
handling many-nucleon systems.  Typical examples of popular many-body
methods are the family of coupled-cluster methods
cite{bartlett2007,dean2004,helgaker,hagen2007a,hagen2007b,hagen2007c}
discussed in chapter , various types of Monte
Carlo methods cite{Pudliner1997,kdl97,ceperley1995,utsuno1999}
discussed in chapters , perturbative expansions cite{ellis1977,mhj95} and
Green's function methods cite{barbieri2004} discussed in chapter, and large-scale diagonalization methods
cite{Whitehead1977,caurier2005,dean2004b,navratil2004,horoi2006} in
chapter .


In the chapters on coupled cluster theories and shell-model
calculations we discuss also how to extract quantities like
spectroscopic factors and onebody densities. These quantities provide
in turn the many-body input to reaction theories, which are not
addressed in this text. (add refs about reaction theories).
Density-functional theory~cite{bartlett2005,peirs2003,vanneck2006} is
discussed in chapter, with an emphasis on how to
constrain the exchange part from the available information from
various many-body methods.  As stated in the preface, there are other
many-body methods used in nuclear physics such as the correlation
operator methods cite{japanese,feldmeier}, the unitary-model-operator
approach of Suzuki and co-workers cite{Fujii2004,Fujii2004b} and
Fermi hypernetted chain theory cite{adelchi,co2007}.  Another very
interesting many-body is the density-matrix renormalization group, see
for example
Refs.~cite{white1992,schollwock2005,dukelsky2002a,pittel2006}.  We
will briefly mention the latter and its applications to nuclear
physics.


In addition to the focus on many-body methods, this text emphasizes
various numerical algorithms and high-performance computing (HPC)
topics such as efficient parallelization of codes.  We will use a
broad range of mathematical methods, from linear algebra problems to
Monte Carlo simulations.  The text gives a survey over some of the
most used methods in computational nuclear physics and each chapter
ends with one or more applications to realistic systems, such
renormalzing the nucleon-nucleon interaction or performing shell-model
calculations for selected nuclei.  Among the algorithms we discuss,
are some of the top algorithms in computational science.  Some of the
algorithms we focus on, taken from the recent surveys by Dongarra and
Sullivan cite{top101} and Cipra cite{top102}, are

o The Monte Carlo method or Metropolis algorithm, devised by John
  von Neumann, Stanislaw Ulam, and Nicholas Metropolis, discussed in
  chapters
o Krylov Subspace Iteration method for large eigenvalue problems
  in particular, developed by Magnus Hestenes, Eduard Stiefel, and
  Cornelius Lanczos, discussed and used in chapter
o The Householder matrix decomposition, developed by Alston
  Householder and used in chapter
o The Fortran compiler, developed by a team lead by John Backus,
  codes used throughout this text.
o The QR algorithm for eigenvalue calculation, developed by Joe
  Francis, used in chapter

As stated in the preface, we will not use much space on the
derivations of these algorithms, our focus being the usage of these in
a specific nuclear physics context.


The next section attempts at guiding you through the plethora of
many-body methods and algorithms we have chosen.


======= How to use this text =======

We assume that you, as a potential reader, have a background in
many-body theories and nuclear physics corresponding to a beginnning
graduate level. This would typically correspond to your fourth or
fifth year of study, undergraduate studies included. In many countries
this would match the penultimate year of a masters degree in physics
or the first year of your graduate studies.  A knowledge of angular
momentum techniques at a pedestrian level is also expected, in
addition to some programming skills. The latter is now standard in
essentially all schools and colleges in the mathematics and natural
sciences.  We assume that you have taken an introductory course in
programming and have some familiarity with high-level and modern
languages such as Java, C++, Fortran and python. Fortran and
C++ are examples of compiled high-level languages, in contrast to
interpreted ones like Maple or Matlab.  This text uses Fortran and C++
as programming languages, whilst python is used for scripting of
computational projects.


Every chapter ends with a large project, which can be reused again in
most of the following chapters.  For every chapter we have link to our
webpage with auxiliary functions and software which you may need.  To
give you an example, chapter ends with a project
that solves the two-body scattering equation.  From a computational
point of view you will need to discretize an integral and invert a
matrix.  Functions for setting up the grid of integration points using
Gaussian quadrature and inverting a matrix using the standard
L(ower)U(pper)-decomposition of a matrix are provided in both Fortran
and C++.  These codes are available at our website (add links to
chapters).  You will use this code in the subsequent chapter where you
construct a medium-dependent renormalized interaction, which can in
turn be used in the shell-model calculations, the coupled-cluster chapter
 or the auxiliary field Monte Carlo approach
in chapter.

In the shell-model chapter you will end up
constructing your own shell-model code.  Furthermore, you will also
learn to parallelize the shell-model code on both a shared memory and
a distributed memory supercomputer. The shell-model code is difficult
to parallelize and we would suggest that you wait with this till you
have gained some experience from simpler cases like the variational
Monte Carlo calculations of chapter.
 
The code for the nucleon-nucleon interaction you will develop in
chapter  can also be used in the chapters on
variational and diffusion Monte Carlo calculations, see chapters
 and .  In the Monte Carlo chapters,
parallelization is slightly simpler compared to the shell-model code.
The variational Monte Carlo calculations are particularly simple.
Parallelization is also a topic of chapter 
and chapter  on the auxiliary field Monte Carlo
calculations.


If your main interest is in shell-model calculations, then we would
recommend that you go through chapters 
possibly the chapter on auxiliary field Monte Carlo if you are
studying systems with very large model spaces.  If you are interested
in level densities and finite temperature properties of nuclei the
latter is an important chapter.  If you also wish to understand how to
use coupled-cluster theory for deriving effective interactions for the
nuclear shell, you should also read chapter

If you are only interested in variational and diffusion Monte Carlo
studies, then chapters are the essential ones.


However, for many of you who do not have the patience or time to go
through all the nitty gritty small details needed to end up with a
final code, (and reach the illustrious and rewarding final stages of
many-body physics), there is hope. We provide complete codes with many
additional features for most of the projects listed in this book.  You
are free to use these codes or just use them as guidelines when you
write your own. These codes contain many auxiliary functions which can
save you quite some time in your own developments.  Some of these
functions, like functions for angular momentum recoupling, are well
tested and you can safely use them as long you understand their
limitations.  There is no point in you wasting time developing your
own codes for say $9j$ symbols or Moshinsky transformation
coefficients (give ref to moshinsky).





======= Choice of programming languages and computational issues =======

As programming language we have ended up with C++ and Fortran.  The
auxiliary library functions are written in both languages.
 
Say more about this later, when text is more complete.
Add about scripting in high-performance computing and notes on python
later
